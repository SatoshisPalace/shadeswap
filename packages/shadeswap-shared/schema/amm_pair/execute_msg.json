{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "add_liquidity_to_a_m_m_contract"
      ],
      "properties": {
        "add_liquidity_to_a_m_m_contract": {
          "type": "object",
          "required": [
            "deposit"
          ],
          "properties": {
            "deposit": {
              "$ref": "#/definitions/TokenPairAmount"
            },
            "execute_sslp_virtual_swap": {
              "type": [
                "boolean",
                "null"
              ]
            },
            "expected_return": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "staking": {
              "type": [
                "boolean",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "swap_tokens"
      ],
      "properties": {
        "swap_tokens": {
          "type": "object",
          "required": [
            "offer"
          ],
          "properties": {
            "execute_arbitrage": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ArbitrageCallback"
                },
                {
                  "type": "null"
                }
              ]
            },
            "expected_return": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "offer": {
              "description": "The token type to swap from.",
              "allOf": [
                {
                  "$ref": "#/definitions/TokenAmount"
                }
              ]
            },
            "to": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "type": "object",
          "required": [
            "amount",
            "from"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "from": {
              "type": "string"
            },
            "msg": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Binary"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "add_white_list_address"
      ],
      "properties": {
        "add_white_list_address": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "remove_whitelist_addresses"
      ],
      "properties": {
        "remove_whitelist_addresses": {
          "type": "object",
          "required": [
            "addresses"
          ],
          "properties": {
            "addresses": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_config"
      ],
      "properties": {
        "set_config": {
          "type": "object",
          "properties": {
            "admin_auth": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Contract"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_custom_pair_fee"
      ],
      "properties": {
        "set_custom_pair_fee": {
          "type": "object",
          "properties": {
            "custom_fee": {
              "anyOf": [
                {
                  "$ref": "#/definitions/CustomFee"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_arbitrage_contract"
      ],
      "properties": {
        "set_arbitrage_contract": {
          "type": "object",
          "properties": {
            "arbitrage_contract": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Contract"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_viewing_key"
      ],
      "properties": {
        "set_viewing_key": {
          "type": "object",
          "required": [
            "viewing_key"
          ],
          "properties": {
            "viewing_key": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "recover_funds"
      ],
      "properties": {
        "recover_funds": {
          "type": "object",
          "required": [
            "amount",
            "to",
            "token"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "msg": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Binary"
                },
                {
                  "type": "null"
                }
              ]
            },
            "to": {
              "type": "string"
            },
            "token": {
              "$ref": "#/definitions/TokenType"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "ArbitrageCallback": {
      "type": "object",
      "required": [
        "execute",
        "msg"
      ],
      "properties": {
        "execute": {
          "type": "boolean"
        },
        "gas_limit": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        }
      }
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Contract": {
      "description": "In the process of being deprecated for [cosmwasm_std::ContractInfo] so use that instead when possible.",
      "type": "object",
      "required": [
        "address",
        "code_hash"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Addr"
        },
        "code_hash": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "CustomFee": {
      "type": "object",
      "required": [
        "lp_fee",
        "shade_dao_fee"
      ],
      "properties": {
        "lp_fee": {
          "$ref": "#/definitions/Fee"
        },
        "shade_dao_fee": {
          "$ref": "#/definitions/Fee"
        }
      }
    },
    "Fee": {
      "type": "object",
      "required": [
        "denom",
        "nom"
      ],
      "properties": {
        "denom": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "nom": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "TokenAmount": {
      "type": "object",
      "required": [
        "amount",
        "token"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "token": {
          "$ref": "#/definitions/TokenType"
        }
      }
    },
    "TokenPair": {
      "type": "array",
      "items": [
        {
          "$ref": "#/definitions/TokenType"
        },
        {
          "$ref": "#/definitions/TokenType"
        }
      ],
      "maxItems": 2,
      "minItems": 2
    },
    "TokenPairAmount": {
      "type": "object",
      "required": [
        "amount_0",
        "amount_1",
        "pair"
      ],
      "properties": {
        "amount_0": {
          "$ref": "#/definitions/Uint128"
        },
        "amount_1": {
          "$ref": "#/definitions/Uint128"
        },
        "pair": {
          "$ref": "#/definitions/TokenPair"
        }
      }
    },
    "TokenType": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "custom_token"
          ],
          "properties": {
            "custom_token": {
              "type": "object",
              "required": [
                "contract_addr",
                "token_code_hash"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/Addr"
                },
                "token_code_hash": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}

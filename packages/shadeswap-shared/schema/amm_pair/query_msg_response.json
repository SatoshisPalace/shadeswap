{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsgResponse",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "get_pair_info"
      ],
      "properties": {
        "get_pair_info": {
          "type": "object",
          "required": [
            "amount_0",
            "amount_1",
            "contract_version",
            "fee_info",
            "liquidity_token",
            "pair",
            "total_liquidity"
          ],
          "properties": {
            "amount_0": {
              "$ref": "#/definitions/Uint128"
            },
            "amount_1": {
              "$ref": "#/definitions/Uint128"
            },
            "contract_version": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "factory": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Contract"
                },
                {
                  "type": "null"
                }
              ]
            },
            "fee_info": {
              "$ref": "#/definitions/FeeInfo"
            },
            "liquidity_token": {
              "$ref": "#/definitions/Contract"
            },
            "pair": {
              "$ref": "#/definitions/TokenPair"
            },
            "total_liquidity": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "get_trade_history"
      ],
      "properties": {
        "get_trade_history": {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TradeHistory"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "get_white_list_address"
      ],
      "properties": {
        "get_white_list_address": {
          "type": "object",
          "required": [
            "addresses"
          ],
          "properties": {
            "addresses": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Addr"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "get_trade_count"
      ],
      "properties": {
        "get_trade_count": {
          "type": "object",
          "required": [
            "count"
          ],
          "properties": {
            "count": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "get_claim_reward"
      ],
      "properties": {
        "get_claim_reward": {
          "type": "object",
          "required": [
            "amount"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "get_estimated_price"
      ],
      "properties": {
        "get_estimated_price": {
          "type": "object",
          "required": [
            "estimated_price"
          ],
          "properties": {
            "estimated_price": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "swap_simulation"
      ],
      "properties": {
        "swap_simulation": {
          "type": "object",
          "required": [
            "lp_fee_amount",
            "price",
            "result",
            "shade_dao_fee_amount",
            "total_fee_amount"
          ],
          "properties": {
            "lp_fee_amount": {
              "$ref": "#/definitions/Uint128"
            },
            "price": {
              "type": "string"
            },
            "result": {
              "$ref": "#/definitions/SwapResult"
            },
            "shade_dao_fee_amount": {
              "$ref": "#/definitions/Uint128"
            },
            "total_fee_amount": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "get_shade_dao_info"
      ],
      "properties": {
        "get_shade_dao_info": {
          "type": "object",
          "required": [
            "admin_auth",
            "lp_fee",
            "shade_dao_address",
            "shade_dao_fee"
          ],
          "properties": {
            "admin_auth": {
              "$ref": "#/definitions/Contract"
            },
            "lp_fee": {
              "$ref": "#/definitions/Fee"
            },
            "shade_dao_address": {
              "type": "string"
            },
            "shade_dao_fee": {
              "$ref": "#/definitions/Fee"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "get_estimated_liquidity"
      ],
      "properties": {
        "get_estimated_liquidity": {
          "type": "object",
          "required": [
            "lp_token",
            "total_lp_token"
          ],
          "properties": {
            "lp_token": {
              "$ref": "#/definitions/Uint128"
            },
            "total_lp_token": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "get_config"
      ],
      "properties": {
        "get_config": {
          "type": "object",
          "required": [
            "lp_token",
            "pair"
          ],
          "properties": {
            "custom_fee": {
              "anyOf": [
                {
                  "$ref": "#/definitions/CustomFee"
                },
                {
                  "type": "null"
                }
              ]
            },
            "factory_contract": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Contract"
                },
                {
                  "type": "null"
                }
              ]
            },
            "lp_token": {
              "$ref": "#/definitions/Contract"
            },
            "pair": {
              "$ref": "#/definitions/TokenPair"
            },
            "staking_contract": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Contract"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Contract": {
      "description": "In the process of being deprecated for [cosmwasm_std::ContractInfo] so use that instead when possible.",
      "type": "object",
      "required": [
        "address",
        "code_hash"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Addr"
        },
        "code_hash": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "CustomFee": {
      "type": "object",
      "required": [
        "lp_fee",
        "shade_dao_fee"
      ],
      "properties": {
        "lp_fee": {
          "$ref": "#/definitions/Fee"
        },
        "shade_dao_fee": {
          "$ref": "#/definitions/Fee"
        }
      }
    },
    "Fee": {
      "type": "object",
      "required": [
        "denom",
        "nom"
      ],
      "properties": {
        "denom": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "nom": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "FeeInfo": {
      "type": "object",
      "required": [
        "lp_fee",
        "shade_dao_address",
        "shade_dao_fee"
      ],
      "properties": {
        "lp_fee": {
          "$ref": "#/definitions/Fee"
        },
        "shade_dao_address": {
          "$ref": "#/definitions/Addr"
        },
        "shade_dao_fee": {
          "$ref": "#/definitions/Fee"
        }
      }
    },
    "SwapResult": {
      "type": "object",
      "required": [
        "return_amount"
      ],
      "properties": {
        "return_amount": {
          "$ref": "#/definitions/Uint128"
        }
      }
    },
    "TokenPair": {
      "type": "array",
      "items": [
        {
          "$ref": "#/definitions/TokenType"
        },
        {
          "$ref": "#/definitions/TokenType"
        }
      ],
      "maxItems": 2,
      "minItems": 2
    },
    "TokenType": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "custom_token"
          ],
          "properties": {
            "custom_token": {
              "type": "object",
              "required": [
                "contract_addr",
                "token_code_hash"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/Addr"
                },
                "token_code_hash": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "TradeHistory": {
      "type": "object",
      "required": [
        "amount_in",
        "amount_out",
        "direction",
        "height",
        "lp_fee_amount",
        "price",
        "shade_dao_fee_amount",
        "timestamp",
        "total_fee_amount"
      ],
      "properties": {
        "amount_in": {
          "$ref": "#/definitions/Uint128"
        },
        "amount_out": {
          "$ref": "#/definitions/Uint128"
        },
        "direction": {
          "type": "string"
        },
        "height": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "lp_fee_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "price": {
          "type": "string"
        },
        "shade_dao_fee_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "timestamp": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "total_fee_amount": {
          "$ref": "#/definitions/Uint128"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
